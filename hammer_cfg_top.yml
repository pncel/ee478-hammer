# Input config file common to all modules

vlsi.core.max_threads: 8
vlsi.core.build_system: make # Generate Make include to aid in flow 

# Tools and Technology setup
vlsi.core:
  # tsmc180 process
  technology: tsmc180
  node: 180
  # SRAM generator
  # Synthesis Tool
  synthesis_tool: "genus"
  # Place-and-Route Tool
  par_tool: "innovus"
  # Sim Tools
  sim_tool: "vcs"
  # DRC and LVS tools (drivers automatically included)
  drc_tool: "calibre"
  lvs_tool: "calibre"
  # Formal tool
  formal_tool: "conformal"
  # Timing tool
  timing_tool: "tempus"

# Misc tool settings
sim.vcs.disable_fgp: true
sim.vcs.disable_force_regs: true
synthesis.genus.write_sdf_args: ["-nosplit_timing_check", "-timescale ns"] # Support for post-synthesis VCS simulation
par.innovus.design_flow_effort: "extreme" # Valid options: express (fastest), standard, and extreme (slowest).

# Simulation inputs
sim.inputs:
  top_module: "UNSPECIFIED" # (Don't set here)
  timescale: "1ns/1ps"
  timing_annotated: True
  options:
    - "+vcs+vcdpluson"
    - "+vcs+vcdplusmemon"
    - "+vcs+vcdplusautoflushon"
    - "-sverilog" # Allow SystemVerilog
    - "-debug_pp"
    - "+define+FUNCTIONAL" # Use functional models of sky130 standard cells
    - "+define+UNIT_DELAY" # Required to be defined for functional models of sky130 standard cells
    - "+warn=noSDFCOM_UHICD" # Ignore up-heirarchy interconnect delay merging warnings
    - "+warn=noSDFCOM_ANICD" # Ignore negative timing adjustment warnings

# Default clock (in case user manually specifies clocks in custom SDC scripts.)
vlsi.inputs.clocks: []

# Hammer will auto-generate a CPF for simple power designs; see hammer/src/hammer-vlsi/defaults.yml for more info
vlsi.inputs.power_spec_mode: "auto"
vlsi.inputs.power_spec_type: "cpf"

# Set default load to some reasonable value (pF)
vlsi.inputs.default_output_load: 0.005

# Placement Constraints
vlsi.inputs.placement_constraints:
  - path: "TOP" # (this value isn't actually checked...)
    type: toplevel
    width:  1600
    height: 1600
    x: 0
    y: 0
    margins: {left: 0, right: 0, top: 0, bottom: 0}

# Pin placement constraints
vlsi.inputs.pin_mode: generated
vlsi.inputs.pin.generate_mode: semi_auto
vlsi.inputs.pin.assignments: [
  {pins: "*", layers: ["METAL2", "METAL4"], side: "bottom"}
]
